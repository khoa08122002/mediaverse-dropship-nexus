// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  HR
  USER
}

enum Status {
  ACTIVE
  INACTIVE
}

enum JobType {
  fulltime
  parttime
  contract
  internship
}

enum JobStatus {
  active
  closed
  draft
}

enum ApplicationStatus {
  pending
  reviewed
  interviewed
  accepted
  rejected
}

enum ContactStatus {
  NEW
  REPLIED
  ARCHIVED
}

enum ContactPriority {
  HIGH
  MEDIUM
  LOW
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  fullName  String
  role      Role      @default(USER)
  status    Status    @default(ACTIVE)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  blogs     Blog[]

  @@map("users")
}

model Blog {
  id            String   @id @default(uuid())
  title         String
  slug          String   @unique
  content       String
  excerpt       String
  featuredImage String?
  category      String
  tags          String[]
  readTime      String?
  isFeatured    Boolean  @default(false)
  status        String   @default("draft")
  published     Boolean  @default(false)
  views         Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  author        User     @relation(fields: [authorId], references: [id])
  authorId      String

  @@map("blogs")
}

model Job {
  id           Int           @id @default(autoincrement())
  title        String
  department   String
  location     String
  type         JobType
  description  String        @db.Text
  requirements String        @db.Text
  benefits     String?       @db.Text
  salary       String?
  status       JobStatus     @default(active)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  applications Application[]

  @@map("jobs")
}

model Application {
  id          Int               @id @default(autoincrement())
  fullName    String
  email       String
  phone       String
  coverLetter String?           @db.Text
  cvFile      String?
  status      ApplicationStatus @default(pending)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  job         Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId       Int

  @@map("applications")
}

model Contact {
  id        String          @id @default(uuid())
  name      String
  email     String
  phone     String?
  company   String?
  service   String?
  budget    String?
  subject   String
  message   String          @db.Text
  status    ContactStatus   @default(NEW)
  priority  ContactPriority @default(MEDIUM)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@map("contacts")
}
