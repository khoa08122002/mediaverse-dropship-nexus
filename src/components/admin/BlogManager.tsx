import React, { useState, useRef, useEffect, useCallback } from 'react';
import { Plus, Edit, Trash, Eye, Search, User, Calendar, Clock, Image as ImageIcon } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import SimpleModal from '@/components/SimpleModal';
import { Editor } from '@tinymce/tinymce-react';
import { blogService } from '@/services/blogService';
import type { BlogImage, BlogData, CreateBlogDTO } from '@/types/blog';
import { toast } from 'sonner';
import {
  AlertDialog,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogCancel,
  AlertDialogAction,
} from "@/components/ui/alert-dialog";

// Error Boundary Component
interface DialogErrorBoundaryState {
  hasError: boolean;
}

interface DialogErrorBoundaryProps {
  children: React.ReactNode;
}

class DialogErrorBoundary extends React.Component<DialogErrorBoundaryProps, DialogErrorBoundaryState> {
  constructor(props: DialogErrorBoundaryProps) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error): DialogErrorBoundaryState {
    // Update state so the next render will show the fallback UI.
    return { hasError: true };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error('Dialog Error Boundary caught an error:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      // You can render any custom fallback UI
      return <div className="p-4 text-center text-red-600">ƒê√£ x·∫£y ra l·ªói v·ªõi dialog. Vui l√≤ng th·ª≠ l·∫°i.</div>;
    }

    return this.props.children;
  }
}

interface BlogFormData extends CreateBlogDTO {
  status: 'draft' | 'published';
}

const categories = [
  "AI Marketing",
  "E-commerce",
  "Content Marketing",
  "Analytics",
  "Supply Chain",
  "Case Studies"
];

const BlogManager = () => {
  const navigate = useNavigate();
  const { user: currentUser, isAuthenticated, logout } = useAuth();
  const editorRef = useRef<any>(null);
  const [blogs, setBlogs] = useState<BlogData[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [showEditor, setShowEditor] = useState(false);
  const [showPreview, setShowPreview] = useState(false);
  const [previewBlog, setPreviewBlog] = useState<BlogData | null>(null);
  const [editingBlog, setEditingBlog] = useState<BlogData | null>(null);
  const [confirmDialogOpen, setConfirmDialogOpen] = useState(false);
  const [confirmDialogConfig, setConfirmDialogConfig] = useState<{
    title: string;
    message: string;
    onConfirm: () => void;
  }>({
    title: '',
    message: '',
    onConfirm: () => {},
  });
  const [newBlog, setNewBlog] = useState<BlogFormData>({
    title: '',
    content: '',
    excerpt: '',
    status: 'draft',
    category: '',
    tags: [],
    readTime: '',
    isFeatured: false,
    featuredImage: {
      url: '',
      alt: ''
    }
  });

  const isAdmin = currentUser?.role === 'ADMIN';
  const isHR = currentUser?.role === 'HR';
  const canManageAllBlogs = isAdmin || isHR;

  useEffect(() => {
    const checkAndFetchBlogs = async () => {
      if (!isAuthenticated) {
        setError('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c');
        return;
      }

      await fetchBlogs();
    };

    checkAndFetchBlogs();
  }, [isAuthenticated]);

  const fetchBlogs = async () => {
    try {
      console.log('üìã fetchBlogs called - starting fetch...');
      setLoading(true);
      setError(null);
      console.log('üìã Loading state set to true, calling blogService.getAllBlogs...');
      
      const data = await blogService.getAllBlogs();
      console.log('üìã Raw data received from API:', data.length, 'blogs');
      console.log('üìã First blog ID:', data[0]?.id);
      console.log('üìã All blog IDs:', data.map(b => b.id));
      
      // Parse featuredImage and tags for all posts
      const processedData = data.map(post => ({
        ...post,
        featuredImage: typeof post.featuredImage === 'string' 
          ? JSON.parse(post.featuredImage)
          : post.featuredImage,
        tags: typeof post.tags === 'string' 
          ? (post.tags ? (post.tags as string).split(',').map((tag: string) => tag.trim()) : [])
          : (Array.isArray(post.tags) ? post.tags : [])
      }));
      console.log('üìã Data processed (featuredImage parsed)');
      
      // Filter blogs based on user role
      const filteredData = canManageAllBlogs 
        ? processedData 
        : processedData.filter(blog => blog.authorId === currentUser?.id);
      console.log('üìã Data filtered - canManageAllBlogs:', canManageAllBlogs);
      console.log('üìã Current user ID:', currentUser?.id);
      console.log('üìã Filtered data count:', filteredData.length);
      console.log('üìã Filtered blog IDs:', filteredData.map(b => b.id));
      
      console.log('üìã Setting blogs state with', filteredData.length, 'blogs...');
      setBlogs(filteredData);
      console.log('üìã Blogs state updated successfully');
      
    } catch (error: any) {
      console.error('üìã Error fetching blogs:', error);
      if (error.response?.status === 401) {
        toast.error('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
        logout();
      } else {
        setError(error.response?.data?.message || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch b√†i vi·∫øt');
        toast.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch b√†i vi·∫øt');
      }
    } finally {
      console.log('üìã Setting loading to false...');
      setLoading(false);
      console.log('üìã fetchBlogs completed');
    }
  };

  const handleSaveBlog = async () => {
    try {
      console.log('üíæ handleSaveBlog called');
      console.log('üíæ newBlog:', newBlog);
      console.log('üíæ editingBlog:', editingBlog);
      
      // Validate required fields
      if (!newBlog.title.trim()) {
        console.log('üíæ Validation failed: title missing');
        toast.error('Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ b√†i vi·∫øt');
        return;
      }
      if (!newBlog.content.trim()) {
        console.log('üíæ Validation failed: content missing');
        toast.error('Vui l√≤ng nh·∫≠p n·ªôi dung b√†i vi·∫øt');
        return;
      }
      if (!newBlog.excerpt.trim()) {
        console.log('üíæ Validation failed: excerpt missing');
        toast.error('Vui l√≤ng nh·∫≠p t√≥m t·∫Øt b√†i vi·∫øt');
        return;
      }
      if (!newBlog.category) {
        console.log('üíæ Validation failed: category missing');
        toast.error('Vui l√≤ng ch·ªçn danh m·ª•c');
        return;
      }

      console.log('üíæ Validation passed');
      console.log('üíæ Current blog status:', newBlog.status);
      console.log('üíæ Is featured:', newBlog.isFeatured);

      // N·∫øu ƒëang set b√†i vi·∫øt l√†m featured, ki·ªÉm tra xem ƒë√£ c√≥ b√†i vi·∫øt featured n√†o ch∆∞a
      if (newBlog.isFeatured) {
        console.log('üíæ Checking for existing featured blog...');
        const currentFeaturedBlog = blogs.find(blog => blog.isFeatured && blog.id !== editingBlog?.id);
        console.log('üíæ Current featured blog:', currentFeaturedBlog);

        if (currentFeaturedBlog) {
          console.log('üíæ Found existing featured blog, showing confirmation dialog');
          setConfirmDialogConfig({
            title: 'X√°c nh·∫≠n thay ƒë·ªïi b√†i vi·∫øt n·ªïi b·∫≠t',
            message: 'Hi·ªán ƒë√£ c√≥ m·ªôt b√†i vi·∫øt n·ªïi b·∫≠t. B·∫°n c√≥ mu·ªën thay th·∫ø b√†i vi·∫øt n·ªïi b·∫≠t hi·ªán t·∫°i kh√¥ng?',
            onConfirm: async () => {
              try {
                setLoading(true);
                console.log('üíæ Updating old featured blog:', currentFeaturedBlog.id);
                // Unset featured cho b√†i vi·∫øt c≈©
                await blogService.updateBlog(currentFeaturedBlog.id, {
                  ...currentFeaturedBlog,
                  isFeatured: false
                });
                await saveNewBlog();
              } catch (error) {
                console.error('üíæ Error updating featured blog:', error);
                toast.error('C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t b√†i vi·∫øt n·ªïi b·∫≠t');
                setLoading(false);
              }
            }
          });
          setConfirmDialogOpen(true);
          return;
        }
      }

      // Show confirmation dialog for create/update
      console.log('üíæ Showing create/update confirmation dialog');
      console.log('üíæ editingBlog exists:', !!editingBlog);
      setConfirmDialogConfig({
        title: editingBlog ? 'X√°c nh·∫≠n c·∫≠p nh·∫≠t' : 'X√°c nh·∫≠n ƒëƒÉng b√†i',
        message: editingBlog 
          ? 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën c·∫≠p nh·∫≠t b√†i vi·∫øt n√†y?' 
          : 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng b√†i vi·∫øt n√†y?',
        onConfirm: async () => {
          try {
            console.log('üíæ Save confirmed, calling saveNewBlog...');
            setLoading(true);
            await saveNewBlog();
          } catch (error) {
            console.error('üíæ Error saving blog:', error);
            if (error instanceof Error) {
              toast.error(`L·ªói: ${error.message}`);
            } else {
              toast.error('C√≥ l·ªói x·∫£y ra khi l∆∞u b√†i vi·∫øt');
            }
            setLoading(false);
          }
        }
      });
      setConfirmDialogOpen(true);
      console.log('üíæ Confirmation dialog opened');
    } catch (error) {
      console.error('üíæ Error in handleSaveBlog:', error);
      toast.error('C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu');
    }
  };

  const saveNewBlog = async () => {
    try {
      console.log('‚úèÔ∏è saveNewBlog called');
      console.log('‚úèÔ∏è editingBlog:', editingBlog);
      console.log('‚úèÔ∏è newBlog data:', newBlog);
      console.log('‚úèÔ∏è canManageAllBlogs:', canManageAllBlogs);
      console.log('‚úèÔ∏è currentUser:', currentUser);
      
      const featuredImageData = {
        url: newBlog.featuredImage?.url?.trim() || '',
        alt: newBlog.featuredImage?.alt?.trim() || newBlog.title.trim()
      };

      if (editingBlog) {
        console.log('‚úèÔ∏è Updating existing blog with ID:', editingBlog.id);
        console.log('‚úèÔ∏è editingBlog.authorId:', editingBlog.authorId);
        console.log('‚úèÔ∏è currentUser.id:', currentUser?.id);
        
        // N·∫øu ng∆∞·ªùi d√πng l√† admin/HR ho·∫∑c l√† t√°c gi·∫£, cho ph√©p c·∫≠p nh·∫≠t t·∫•t c·∫£ c√°c tr∆∞·ªùng
        const hasFullPermission = canManageAllBlogs || editingBlog.authorId === currentUser?.id;
        console.log('‚úèÔ∏è hasFullPermission:', hasFullPermission);
        
        if (hasFullPermission) {
          console.log('‚úèÔ∏è User has full permission, updating all fields');
          const updateData = {
            title: newBlog.title.trim(),
            content: newBlog.content.trim(),
            excerpt: newBlog.excerpt.trim(),
            category: newBlog.category,
            tags: newBlog.tags,
            readTime: newBlog.readTime,
            status: newBlog.status,
            isFeatured: newBlog.status === 'published' && newBlog.isFeatured,
            featuredImage: featuredImageData
          };

          console.log('‚úèÔ∏è Update data:', updateData);
          const response = await blogService.updateBlog(editingBlog.id, updateData);
          console.log('‚úèÔ∏è Update response:', response);
          toast.success('C·∫≠p nh·∫≠t b√†i vi·∫øt th√†nh c√¥ng');
        } else {
          console.log('‚úèÔ∏è User has limited permission, updating only featured status');
          // N·∫øu kh√¥ng ph·∫£i admin/HR ho·∫∑c t√°c gi·∫£, ch·ªâ cho ph√©p c·∫≠p nh·∫≠t tr·∫°ng th√°i featured
          const updateData = {
            isFeatured: newBlog.status === 'published' && newBlog.isFeatured
          };
          console.log('‚úèÔ∏è Limited update data:', updateData);
          const response = await blogService.updateBlog(editingBlog.id, updateData);
          console.log('‚úèÔ∏è Limited update response:', response);
          toast.success('C·∫≠p nh·∫≠t tr·∫°ng th√°i n·ªïi b·∫≠t th√†nh c√¥ng');
        }
      } else {
        console.log('‚úèÔ∏è Creating new blog');
        // T·∫°o blog m·ªõi
        const blogData = {
          title: newBlog.title.trim(),
          content: newBlog.content.trim(),
          excerpt: newBlog.excerpt.trim(),
          category: newBlog.category,
          tags: newBlog.tags,
          readTime: newBlog.readTime,
          status: newBlog.status,
          isFeatured: newBlog.status === 'published' && newBlog.isFeatured,
          featuredImage: featuredImageData
        };

        console.log('‚úèÔ∏è Create blog data:', blogData);
        const response = await blogService.createBlog(blogData);
        console.log('‚úèÔ∏è Create response:', response);
        toast.success('T·∫°o b√†i vi·∫øt m·ªõi th√†nh c√¥ng');
      }

      console.log('‚úèÔ∏è Refreshing blogs list...');
      await fetchBlogs();
      console.log('‚úèÔ∏è Closing editor...');
      setShowEditor(false);
      setEditingBlog(null);
      setNewBlog({
        title: '',
        content: '',
        excerpt: '',
        status: 'draft',
        category: '',
        tags: [],
        readTime: '',
        isFeatured: false,
        featuredImage: {
          url: '',
          alt: ''
        }
      });
      console.log('‚úèÔ∏è saveNewBlog completed successfully');
    } catch (error: any) {
      console.error('‚úèÔ∏è Error in saveNewBlog:', error);
      
      // Enhanced error handling
      let errorMessage = 'C√≥ l·ªói x·∫£y ra khi l∆∞u b√†i vi·∫øt';
      
      if (error.response) {
        const status = error.response.status;
        const data = error.response.data;
        
        console.log('‚úèÔ∏è Update error details:', {
          status,
          data,
          blogId: editingBlog?.id,
          url: error.config?.url,
          method: error.config?.method,
          headers: error.config?.headers
        });
        
        switch (status) {
          case 401:
            errorMessage = 'Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.';
            logout();
            break;
          case 403:
            errorMessage = 'B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a b√†i vi·∫øt n√†y.';
            break;
          case 400:
            errorMessage = data?.message || 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.';
            break;
          case 404:
            errorMessage = 'B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i.';
            break;
          case 500:
            errorMessage = 'L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau.';
            break;
          default:
            errorMessage = data?.message || data?.error || errorMessage;
        }
      } else if (error.request) {
        console.log('‚úèÔ∏è Network error - no response received:', error.request);
        errorMessage = 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.';
      } else {
        console.log('‚úèÔ∏è General error:', error.message);
        errorMessage = error.message || errorMessage;
      }
      
      toast.error(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const handleEditBlog = (blog: BlogData) => {
    console.log('‚úèÔ∏è handleEditBlog called with blog:', blog);
    console.log('‚úèÔ∏è Blog author ID:', blog.authorId);
    console.log('‚úèÔ∏è Current user ID:', currentUser?.id);
    console.log('‚úèÔ∏è User can manage all blogs:', canManageAllBlogs);
    console.log('‚úèÔ∏è Blog tags type:', typeof blog.tags, 'Value:', blog.tags);
    
    setEditingBlog(blog);
    
    // Convert tags from string to array if needed
    let tagsArray: string[] = [];
    if (typeof blog.tags === 'string') {
      console.log('‚úèÔ∏è Converting tags from string to array');
      tagsArray = blog.tags ? (blog.tags as string).split(',').map(tag => tag.trim()) : [];
    } else if (Array.isArray(blog.tags)) {
      console.log('‚úèÔ∏è Tags is already array');
      tagsArray = blog.tags;
    } else {
      console.log('‚úèÔ∏è Tags is not string or array, setting empty array');
      tagsArray = [];
    }
    
    const editData = {
      title: blog.title,
      content: blog.content,
      excerpt: blog.excerpt,
      status: blog.status,
      category: blog.category,
      tags: tagsArray,
      readTime: blog.readTime,
      isFeatured: blog.isFeatured,
      featuredImage: blog.featuredImage
    };
    
    console.log('‚úèÔ∏è Setting newBlog state with:', editData);
    console.log('‚úèÔ∏è Tags converted to:', editData.tags);
    setNewBlog(editData);
    setShowEditor(true);
    console.log('‚úèÔ∏è Editor opened for editing');
  };

  const handlePreviewBlog = useCallback((blog: BlogData | BlogFormData) => {
    try {
      // Delay to ensure previous dialog is fully closed
      setTimeout(() => {
        setPreviewBlog(blog as BlogData);
        setShowPreview(true);
      }, 100);
    } catch (error) {
      console.error('Error setting preview blog:', error);
      toast.error('Kh√¥ng th·ªÉ xem tr∆∞·ªõc b√†i vi·∫øt');
    }
  }, []);

  const handleClosePreview = useCallback((open: boolean) => {
    if (!open) {
      try {
        setShowPreview(false);
        // Clear preview data after animation completes
        setTimeout(() => {
          setPreviewBlog(null);
        }, 300);
      } catch (error) {
        console.error('Error closing preview:', error);
      }
    }
  }, []);

  const handleCloseEditor = useCallback(() => {
    try {
      setShowEditor(false);
      setEditingBlog(null);
      // Clear editor data after animation completes
      setTimeout(() => {
        setNewBlog({
          title: '',
          content: '',
          excerpt: '',
          status: 'draft',
          category: '',
          tags: [],
          readTime: '',
          isFeatured: false,
          featuredImage: {
            url: '',
            alt: ''
          }
        });
      }, 150);
    } catch (error) {
      console.error('Error closing editor:', error);
    }
  }, []);

  const handleDeleteBlog = async (id: string) => {
    console.log('üóëÔ∏è handleDeleteBlog called with ID:', id);
    console.log('üóëÔ∏è Current blogs count before delete:', blogs.length);
    console.log('üóëÔ∏è Blog to delete exists in list:', blogs.find(b => b.id === id) ? 'YES' : 'NO');
    
    setConfirmDialogConfig({
      title: 'X√°c nh·∫≠n x√≥a',
      message: 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a b√†i vi·∫øt n√†y?',
      onConfirm: async () => {
        console.log('üóëÔ∏è Delete confirmed, starting deletion process...');
        try {
          setLoading(true);
          console.log('üóëÔ∏è Loading state set to true');
          console.log('üóëÔ∏è Attempting to delete blog with ID:', id);
          
          // Check if user has access token
          const token = localStorage.getItem('accessToken');
          console.log('üóëÔ∏è Access token available:', !!token);
          console.log('üóëÔ∏è Token preview:', token?.substring(0, 30) + '...');
          
          console.log('üóëÔ∏è Calling blogService.deleteBlog...');
          await blogService.deleteBlog(id);
          console.log('üóëÔ∏è blogService.deleteBlog completed successfully');
          
          toast.success('X√≥a b√†i vi·∫øt th√†nh c√¥ng');
          console.log('üóëÔ∏è Success toast shown');
          
          console.log('üóëÔ∏è Calling fetchBlogs to refresh list...');
          await fetchBlogs();
          console.log('üóëÔ∏è fetchBlogs completed');
          console.log('üóëÔ∏è New blogs count after refresh:', blogs.length);
          
        } catch (error: any) {
          console.error('üóëÔ∏è Error deleting blog:', error);
          
          // Enhanced error handling
          let errorMessage = 'C√≥ l·ªói x·∫£y ra khi x√≥a b√†i vi·∫øt';
          
          if (error.response) {
            const status = error.response.status;
            const data = error.response.data;
            
            console.log('üóëÔ∏è Delete error details:', {
              status,
              data,
              blogId: id,
              url: error.config?.url,
              method: error.config?.method,
              headers: error.config?.headers
            });
            
            switch (status) {
              case 401:
                errorMessage = 'Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.';
                logout();
                break;
              case 403:
                errorMessage = 'B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a b√†i vi·∫øt n√†y.';
                break;
              case 404:
                errorMessage = 'B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a.';
                break;
              case 500:
                errorMessage = 'L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau.';
                break;
              default:
                errorMessage = data?.message || data?.error || errorMessage;
            }
          } else if (error.request) {
            console.log('üóëÔ∏è Network error - no response received:', error.request);
            errorMessage = 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.';
          } else {
            console.log('üóëÔ∏è General error:', error.message);
            errorMessage = error.message || errorMessage;
          }
          
          toast.error(errorMessage);
        } finally {
          console.log('üóëÔ∏è Setting loading to false...');
          setLoading(false);
          console.log('üóëÔ∏è Delete process completed');
        }
      }
    });
    console.log('üóëÔ∏è Confirm dialog config set, opening dialog...');
    console.log('üóëÔ∏è Current confirmDialogOpen state:', confirmDialogOpen);
    setConfirmDialogOpen(true);
    console.log('üóëÔ∏è setConfirmDialogOpen(true) called');
    
    // Log after a short delay to see if state updated
    setTimeout(() => {
      console.log('üóëÔ∏è confirmDialogOpen state after update:', confirmDialogOpen);
    }, 100);
  };

  const handleSearch = async () => {
    try {
      setLoading(true);
      if (searchQuery.trim()) {
        const results = await blogService.searchBlogs(searchQuery);
        setBlogs(results);
      } else {
        await fetchBlogs();
      }
    } catch (error) {
      console.error('Error searching blogs:', error);
      toast.error('C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm');
    } finally {
      setLoading(false);
    }
  };

  const handleImageUpload = async (blobInfo: any) => {
    try {
      const { url } = await blogService.uploadImage(blobInfo.blob());
      return url;
    } catch (error) {
      console.error('Error uploading image:', error);
      toast.error('Kh√¥ng th·ªÉ t·∫£i l√™n h√¨nh ·∫£nh');
      throw error;
    }
  };

  const handleFeaturedChange = async (checked: boolean) => {
    console.log('‚≠ê handleFeaturedChange called with checked:', checked);
    console.log('‚≠ê editingBlog:', editingBlog);
    console.log('‚≠ê Current blogs:', blogs.map(b => ({ id: b.id, title: b.title, isFeatured: b.isFeatured })));
    
    if (!checked) {
      console.log('‚≠ê Unchecking featured, setting to false');
      // N·∫øu b·ªè featured, kh√¥ng c·∫ßn x√°c nh·∫≠n
      setNewBlog(prev => ({ ...prev, isFeatured: false }));
      return;
    }

    console.log('‚≠ê Checking for existing featured blog...');
    // Ki·ªÉm tra xem c√≥ b√†i vi·∫øt featured n√†o kh√°c kh√¥ng
    const currentFeaturedBlog = blogs.find(blog => blog.isFeatured && blog.id !== editingBlog?.id);
    console.log('‚≠ê Current featured blog found:', currentFeaturedBlog);
    
    if (currentFeaturedBlog) {
      console.log('‚≠ê Found existing featured blog, showing confirmation dialog');
      setConfirmDialogConfig({
        title: 'X√°c nh·∫≠n thay ƒë·ªïi b√†i vi·∫øt n·ªïi b·∫≠t',
        message: `B√†i vi·∫øt "${currentFeaturedBlog.title}" hi·ªán ƒëang l√† b√†i vi·∫øt n·ªïi b·∫≠t. B·∫°n c√≥ mu·ªën thay th·∫ø b·∫±ng b√†i vi·∫øt n√†y kh√¥ng?`,
        onConfirm: async () => {
          try {
            console.log('‚≠ê Featured change confirmed, updating old featured blog');
            setLoading(true);
            // Unset featured cho b√†i vi·∫øt c≈©
            console.log('‚≠ê Unsetting featured for blog:', currentFeaturedBlog.id);
            await blogService.updateBlog(currentFeaturedBlog.id, {
              isFeatured: false
            });
            console.log('‚≠ê Old featured blog updated, setting new blog as featured');
            // Set featured cho b√†i vi·∫øt m·ªõi
            setNewBlog(prev => ({ ...prev, isFeatured: true }));
            toast.success('ƒê√£ c·∫≠p nh·∫≠t b√†i vi·∫øt n·ªïi b·∫≠t');
            console.log('‚≠ê Featured change completed successfully');
          } catch (error) {
            console.error('‚≠ê Error updating featured blog:', error);
            toast.error('C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t b√†i vi·∫øt n·ªïi b·∫≠t');
            // Revert checkbox state
            setNewBlog(prev => ({ ...prev, isFeatured: false }));
          } finally {
            setLoading(false);
          }
        }
      });
      setConfirmDialogOpen(true);
    } else {
      console.log('‚≠ê No existing featured blog found, setting directly');
      // N·∫øu kh√¥ng c√≥ b√†i vi·∫øt featured n√†o kh√°c, set tr·ª±c ti·∫øp
      setNewBlog(prev => ({ ...prev, isFeatured: true }));
    }
  };

  // Debug effect for confirmDialogOpen state
  useEffect(() => {
    console.log('üóëÔ∏è confirmDialogOpen state changed to:', confirmDialogOpen);
    console.log('üóëÔ∏è confirmDialogConfig:', confirmDialogConfig);
  }, [confirmDialogOpen, confirmDialogConfig]);



  // Cleanup effect for dialog states
  useEffect(() => {
    return () => {
      // Cleanup when component unmounts
      setShowPreview(false);
      setShowEditor(false);
      setConfirmDialogOpen(false);
      setPreviewBlog(null);
    };
  }, []);

  if (!isAuthenticated) {
    return (
      <div className="flex flex-col items-center justify-center h-[calc(100vh-4rem)] p-4">
        <div className="text-2xl font-bold text-gray-700 mb-2">Vui l√≤ng ƒëƒÉng nh·∫≠p</div>
        <p className="text-gray-500">B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p trang n√†y.</p>
      </div>
    );
  }

  if (showEditor) {
    return (
      <>
        <div className="space-y-6">
          <div className="flex justify-between items-center">
            <h1 className="text-3xl font-bold text-gray-800">
              {editingBlog ? 'Ch·ªânh s·ª≠a b√†i vi·∫øt' : 'T·∫°o b√†i vi·∫øt m·ªõi'}
            </h1>
            <button
              onClick={handleCloseEditor}
              className="text-gray-600 hover:text-gray-800"
            >
              Quay l·∫°i
            </button>
          </div>

          <div className="bg-white p-6 rounded-lg shadow-md">
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Ti√™u ƒë·ªÅ
                </label>
                <input
                  type="text"
                  value={newBlog.title}
                  onChange={(e) => setNewBlog({...newBlog, title: e.target.value})}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                  placeholder="Nh·∫≠p ti√™u ƒë·ªÅ b√†i vi·∫øt"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  N·ªôi dung
                </label>
                <Editor
                  tinymceScriptSrc="/tinymce/tinymce.js"
                  onInit={(evt, editor) => editorRef.current = editor}
                  value={newBlog.content}
                  onEditorChange={(content) => setNewBlog({...newBlog, content})}
                  init={{
                    height: 500,
                    menubar: true,
                    plugins: [
                      'advlist', 'autolink', 'lists', 'link', 'image', 'charmap', 'preview',
                      'anchor', 'searchreplace', 'visualblocks', 'code', 'fullscreen',
                      'insertdatetime', 'media', 'table', 'code', 'help', 'wordcount'
                    ],
                    toolbar: 'undo redo | blocks | ' +
                      'bold italic forecolor | alignleft aligncenter ' +
                      'alignright alignjustify | bullist numlist outdent indent | ' +
                      'removeformat | help',
                    content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:14px }',
                    skin: 'oxide',
                    content_css: 'default',
                    images_upload_handler: handleImageUpload
                  }}
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  T√≥m t·∫Øt
                </label>
                <textarea
                  value={newBlog.excerpt}
                  onChange={(e) => setNewBlog({...newBlog, excerpt: e.target.value})}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                  rows={4}
                  placeholder="Nh·∫≠p t√≥m t·∫Øt b√†i vi·∫øt"
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Th·ªùi gian ƒë·ªçc
                  </label>
                  <input
                    type="text"
                    value={newBlog.readTime}
                    onChange={(e) => setNewBlog({...newBlog, readTime: e.target.value})}
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    placeholder="VD: 5 ph√∫t ƒë·ªçc"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Danh m·ª•c
                  </label>
                  <select
                    value={newBlog.category}
                    onChange={(e) => setNewBlog({...newBlog, category: e.target.value})}
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Ch·ªçn danh m·ª•c</option>
                    {categories.map((category) => (
                      <option key={category} value={category}>
                        {category}
                      </option>
                    ))}
                  </select>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Tags (ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y)
                </label>
                <input
                  type="text"
                  value={Array.isArray(newBlog.tags) ? newBlog.tags.join(', ') : ''}
                  onChange={(e) => {
                    const tagsString = e.target.value;
                    const tagsArray = tagsString ? tagsString.split(',').map(tag => tag.trim()) : [];
                    setNewBlog({...newBlog, tags: tagsArray});
                  }}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                  placeholder="VD: AI, Marketing, Technology"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ·∫¢nh ƒë·∫°i di·ªán
                </label>
                <div className="space-y-4">
                  <input
                    type="text"
                    value={newBlog.featuredImage.url}
                    onChange={(e) => setNewBlog(prev => ({
                      ...prev,
                      featuredImage: {
                        ...prev.featuredImage,
                        url: e.target.value
                      }
                    }))}
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    placeholder="Nh·∫≠p URL ·∫£nh ƒë·∫°i di·ªán"
                  />
                  <input
                    type="text"
                    value={newBlog.featuredImage.alt}
                    onChange={(e) => setNewBlog(prev => ({
                      ...prev,
                      featuredImage: {
                        ...prev.featuredImage,
                        alt: e.target.value
                      }
                    }))}
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    placeholder="M√¥ t·∫£ ·∫£nh (alt text)"
                  />
                  {newBlog.featuredImage.url && (
                    <div className="mt-2">
                      <img
                        src={newBlog.featuredImage.url}
                        alt={newBlog.featuredImage.alt}
                        className="max-w-xs rounded-lg shadow-md"
                      />
                    </div>
                  )}
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Tr·∫°ng th√°i
                </label>
                <div className="space-y-4">
                  <select
                    value={newBlog.status}
                    onChange={(e) => {
                      const newStatus = e.target.value as 'draft' | 'published';
                      setNewBlog(prev => ({
                        ...prev,
                        status: newStatus
                      }));
                    }}
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    disabled={!canManageAllBlogs && editingBlog?.authorId !== currentUser?.id}
                  >
                    <option value="draft">B·∫£n nh√°p</option>
                    <option value="published">ƒê√£ xu·∫•t b·∫£n</option>
                  </select>

                  {newBlog.status === 'published' && (
                    <div className="flex items-center space-x-2">
                      <input
                        type="checkbox"
                        id="isFeatured"
                        checked={newBlog.isFeatured}
                        onChange={(e) => handleFeaturedChange(e.target.checked)}
                        className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                      />
                      <label htmlFor="isFeatured" className="text-sm text-gray-700">
                        ƒê·∫∑t l√†m b√†i vi·∫øt n·ªïi b·∫≠t
                      </label>
                    </div>
                  )}
                </div>
              </div>

              <div className="flex space-x-4">
                <button
                  onClick={handleSaveBlog}
                  disabled={loading}
                  className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50"
                >
                  {loading ? 'ƒêang x·ª≠ l√Ω...' : (editingBlog ? 'C·∫≠p nh·∫≠t' : 'ƒêƒÉng b√†i')}
                </button>
                <button
                  onClick={() => handlePreviewBlog(newBlog)}
                  disabled={loading}
                  className="bg-gray-100 text-gray-800 px-6 py-2 rounded-lg hover:bg-gray-200 disabled:opacity-50"
                >
                  Xem tr∆∞·ªõc
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Confirmation Dialog for Editor View */}
        <AlertDialog open={confirmDialogOpen} onOpenChange={setConfirmDialogOpen}>
          <AlertDialogContent>
            <AlertDialogHeader>
              <AlertDialogTitle>{confirmDialogConfig.title}</AlertDialogTitle>
              <AlertDialogDescription>
                {confirmDialogConfig.message}
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter>
              <AlertDialogCancel onClick={() => {
                try {
                  console.log('üóëÔ∏è Dialog cancelled');
                  if (confirmDialogConfig.title.includes('n·ªïi b·∫≠t')) {
                    // If canceling featured blog change, revert the checkbox
                    setNewBlog(prev => ({ ...prev, isFeatured: false }));
                  }
                  setConfirmDialogOpen(false);
                } catch (error) {
                  console.error('Error closing dialog:', error);
                  setConfirmDialogOpen(false);
                }
              }}>
                H·ªßy
              </AlertDialogCancel>
              <AlertDialogAction
                onClick={() => {
                  try {
                    console.log('üóëÔ∏è Dialog confirmed, calling onConfirm...');
                    setConfirmDialogOpen(false);
                    confirmDialogConfig.onConfirm();
                  } catch (error) {
                    console.error('Error confirming dialog:', error);
                    setConfirmDialogOpen(false);
                  }
                }}
              >
                X√°c nh·∫≠n
              </AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      </>
    );
  }

  return (
    <DialogErrorBoundary>
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <h1 className="text-3xl font-bold text-gray-800">Blog</h1>
          <button
            onClick={() => setShowEditor(true)}
            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center space-x-2"
          >
            <Plus className="w-4 h-4" />
            <span>T·∫°o b√†i vi·∫øt</span>
          </button>
        </div>

        <div className="bg-white p-6 rounded-lg shadow-md">
          <div className="flex justify-between items-center mb-4">
            <div className="flex items-center space-x-2">
              <Search className="w-5 h-5 text-gray-400" />
              <input
                type="text"
                placeholder="T√¨m ki·∫øm b√†i vi·∫øt..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              />
            </div>
            
            <div className="flex items-center space-x-2 text-sm text-gray-600">
              <span>{blogs.length} b√†i vi·∫øt</span>
            </div>
          </div>

          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="border-b">
                  <th className="text-left py-3 px-4">Ti√™u ƒë·ªÅ</th>
                  <th className="text-left py-3 px-4">T√°c gi·∫£</th>
                  <th className="text-left py-3 px-4">Tr·∫°ng th√°i</th>
                  <th className="text-left py-3 px-4">Ng√†y ƒëƒÉng</th>
                  <th className="text-left py-3 px-4">L∆∞·ª£t xem</th>
                  <th className="text-left py-3 px-4">Thao t√°c</th>
                </tr>
              </thead>
              <tbody>
                {blogs.map((blog) => (
                  <tr key={blog.id} className="border-b">
                    <td className="py-3 px-4">
                      <div className="flex items-center space-x-4">
                        {blog.featuredImage?.url ? (
                          <img
                            src={blog.featuredImage.url}
                            alt={blog.featuredImage.alt}
                            className="w-16 h-16 object-cover rounded-lg"
                          />
                        ) : (
                          <div className="w-16 h-16 bg-gray-100 rounded-lg flex items-center justify-center">
                            <ImageIcon className="w-6 h-6 text-gray-400" />
                          </div>
                        )}
                        <div>
                          <p className="font-medium text-gray-800">{blog.title}</p>
                          <p className="text-sm text-gray-600">{blog.excerpt.substring(0, 100)}...</p>
                        </div>
                      </div>
                    </td>
                    <td className="py-3 px-4 text-gray-600">{blog.author.fullName}</td>
                    <td className="py-3 px-4">
                      <div className="flex flex-col gap-1">
                        <span className={`px-2 py-1 rounded-full text-xs ${
                          blog.status === 'published'
                            ? 'bg-green-100 text-green-800'
                            : 'bg-yellow-100 text-yellow-800'
                        }`}>
                          {blog.status === 'published' ? 'ƒê√£ xu·∫•t b·∫£n' : 'B·∫£n nh√°p'}
                        </span>
                        {blog.isFeatured && (
                          <span className="px-2 py-1 rounded-full text-xs bg-purple-100 text-purple-800">
                            B√†i vi·∫øt n·ªïi b·∫≠t
                          </span>
                        )}
                      </div>
                    </td>
                    <td className="py-3 px-4 text-gray-600">{new Date(blog.createdAt).toLocaleDateString()}</td>
                    <td className="py-3 px-4 text-gray-600">{blog.views}</td>
                    <td className="py-3 px-4">
                      <div className="flex items-center space-x-2">
                        {(canManageAllBlogs || blog.authorId === currentUser?.id) && (
                          <>
                            <button
                              onClick={() => handleEditBlog(blog)}
                              disabled={loading}
                              className="text-blue-600 hover:text-blue-800 disabled:opacity-50"
                              title="Ch·ªânh s·ª≠a b√†i vi·∫øt"
                            >
                              <Edit className="w-4 h-4" />
                            </button>
                            <button
                              onClick={() => handleDeleteBlog(blog.id)}
                              disabled={loading}
                              className="text-red-600 hover:text-red-800 disabled:opacity-50"
                              title="X√≥a b√†i vi·∫øt"
                            >
                              <Trash className="w-4 h-4" />
                            </button>
                          </>
                        )}
                        <button
                          onClick={() => handlePreviewBlog(blog)}
                          className="text-gray-600 hover:text-gray-800"
                        >
                          <Eye className="w-4 h-4" />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

        {/* Preview Dialog with Error Boundary */}
        {showPreview && (
          <DialogErrorBoundary>
            <SimpleModal 
              isOpen={showPreview} 
              onClose={() => handleClosePreview(false)}
              title="Xem tr∆∞·ªõc b√†i vi·∫øt"
            >
              {previewBlog ? (
                <div className="space-y-6">
                  {previewBlog.featuredImage?.url && (
                    <div className="relative rounded-lg overflow-hidden">
                      <img 
                        src={previewBlog.featuredImage.url} 
                        alt={previewBlog.featuredImage.alt || ''}
                        className="w-full h-64 object-cover"
                        onError={(e) => {
                          console.error('Image failed to load:', previewBlog.featuredImage?.url);
                          e.currentTarget.style.display = 'none';
                        }}
                      />
                    </div>
                  )}

                  <div className="space-y-4">
                    <div>
                      <span className="inline-block px-3 py-1 bg-blue-100 text-blue-600 rounded-full text-sm font-medium">
                        {previewBlog.category || 'Ch∆∞a ph√¢n lo·∫°i'}
                      </span>
                    </div>

                    <h1 className="text-3xl font-bold text-gray-900">{previewBlog.title || 'Ti√™u ƒë·ªÅ ch∆∞a c√≥'}</h1>

                    <div className="flex flex-wrap gap-4 text-sm text-gray-600">
                      <div className="flex items-center">
                        <User className="w-4 h-4 mr-2" />
                        <span>{previewBlog.author?.fullName || previewBlog.authorId || 'Admin'}</span>
                      </div>
                      {previewBlog.createdAt && (
                        <div className="flex items-center">
                          <Calendar className="w-4 h-4 mr-2" />
                          <span>{new Date(previewBlog.createdAt).toLocaleDateString()}</span>
                        </div>
                      )}
                      <div className="flex items-center">
                        <Clock className="w-4 h-4 mr-2" />
                        <span>{previewBlog.readTime || '5 min'}</span>
                      </div>
                    </div>

                    {previewBlog.tags && previewBlog.tags.length > 0 && (
                      <div className="flex flex-wrap gap-2">
                        {previewBlog.tags.map((tag, index) => (
                          <span key={index} className="px-3 py-1 bg-gray-100 text-gray-700 rounded-full text-sm">
                            {tag}
                          </span>
                        ))}
                      </div>
                    )}

                    <div className="prose max-w-none">
                      {previewBlog.excerpt && (
                        <p className="text-gray-600 italic border-l-4 border-blue-500 pl-4">
                          {previewBlog.excerpt}
                        </p>
                      )}
                      {previewBlog.content && (
                        <div 
                          dangerouslySetInnerHTML={{ __html: previewBlog.content }}
                          style={{ wordBreak: 'break-word' }}
                        />
                      )}
                    </div>
                  </div>
                </div>
              ) : (
                <div className="text-center py-8">
                  <p className="text-gray-500">Kh√¥ng c√≥ n·ªôi dung ƒë·ªÉ xem tr∆∞·ªõc</p>
                </div>
              )}
            </SimpleModal>
          </DialogErrorBoundary>
        )}

        {/* Confirmation Dialog for Main View (Delete, etc.) */}
        <AlertDialog open={confirmDialogOpen} onOpenChange={setConfirmDialogOpen}>
          <AlertDialogContent>
            <AlertDialogHeader>
              <AlertDialogTitle>{confirmDialogConfig.title}</AlertDialogTitle>
              <AlertDialogDescription>
                {confirmDialogConfig.message}
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter>
              <AlertDialogCancel onClick={() => {
                try {
                  console.log('üóëÔ∏è Dialog cancelled');
                  if (confirmDialogConfig.title.includes('n·ªïi b·∫≠t')) {
                    // If canceling featured blog change, revert the checkbox
                    setNewBlog(prev => ({ ...prev, isFeatured: false }));
                  }
                  setConfirmDialogOpen(false);
                } catch (error) {
                  console.error('Error closing dialog:', error);
                  setConfirmDialogOpen(false);
                }
              }}>
                H·ªßy
              </AlertDialogCancel>
              <AlertDialogAction
                onClick={() => {
                  try {
                    console.log('üóëÔ∏è Dialog confirmed, calling onConfirm...');
                    setConfirmDialogOpen(false);
                    confirmDialogConfig.onConfirm();
                  } catch (error) {
                    console.error('Error confirming dialog:', error);
                    setConfirmDialogOpen(false);
                  }
                }}
              >
                X√°c nh·∫≠n
              </AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      </div>
    </DialogErrorBoundary>
  );
};

export default BlogManager;
