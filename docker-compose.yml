version: '3.8'

services:
  # Frontend application
  frontend:
    build:
      context: .
      target: builder
    command: npm run dev:frontend -- --host 0.0.0.0 --port 3000
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://app:3002
      - VITE_PROXY_TARGET=http://app:3002
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - app-network

  # Main application (Backend API)
  app:
    build: .
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - PORT=3002
      - HOST=0.0.0.0
      # PostgreSQL configuration
      - DATABASE_URL=postgresql://${POSTGRES_USER:-phg_user}:${POSTGRES_PASSWORD:-your-strong-password}@postgres:5432/${POSTGRES_DB:-phg_corporation}
      # JWT configuration
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-7d}
      # CORS configuration
      - CORS_ORIGIN=${CORS_ORIGIN:-http://frontend:3000,http://localhost:3000}
    volumes:
      # Persist uploads
      - uploads_data:/app/uploads
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3002/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-phg_corporation}
      - POSTGRES_USER=${POSTGRES_USER:-phg_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-your-strong-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-phg_user}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Redis cache (uncomment if needed)
  # redis:
  #   image: redis:7-alpine
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

volumes:
  uploads_data:
  postgres_data:
  # redis_data:

networks:
  app-network:
    driver: bridge 